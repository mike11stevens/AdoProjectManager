@model AdoProjectManager.Models.PagedResult<AdoProjectManager.Models.AdoProject>

@{
    ViewData["Title"] = "Clone Azure DevOps Project";
}

<div class="container mt-4">
    <div class="row">
        <div class="col-md-12">
            <h2><i class="fas fa-copy"></i> Clone Azure DevOps Project</h2>
            <p class="lead">Select a project to clone into a new Azure DevOps project</p>
            
            @if (ViewBag.Error != null)
            {
                <div class="alert alert-danger" role="alert">
                    <i class="fas fa-exclamation-triangle"></i> @ViewBag.Error
                </div>
            }

            @if (TempData["Error"] != null)
            {
                <div class="alert alert-danger" role="alert">
                    <i class="fas fa-exclamation-triangle"></i> @TempData["Error"]
                </div>
            }

            <!-- Search Bar -->
            <div class="row mb-3">
                <div class="col-md-6">
                    <div class="input-group">
                        <input type="text" class="form-control" id="searchInput" 
                               placeholder="Search projects... (use * for wildcards)" 
                               value="@Model.SearchQuery">
                        <button class="btn btn-outline-secondary" type="button" id="searchButton">
                            <i class="fas fa-search"></i> Search
                        </button>
                    </div>
                    <small class="text-muted">Examples: "Web*", "*API", "*test*"</small>
                </div>
            </div>

            <div id="projectsContainer">
                <partial name="_ProjectsCloneTable" model="Model" />
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('searchInput');
    const searchButton = document.getElementById('searchButton');
    const projectsContainer = document.getElementById('projectsContainer');
    let searchTimeout;

    function performSearch(page = 1) {
        const searchQuery = searchInput.value.trim();
        const url = `/ProjectClone/SearchProjects?page=${page}&searchQuery=${encodeURIComponent(searchQuery)}`;
        
        fetch(url)
            .then(response => response.text())
            .then(html => {
                projectsContainer.innerHTML = html;
                
                // Update URL without page reload
                const newUrl = new URL(window.location);
                newUrl.searchParams.set('page', page);
                if (searchQuery) {
                    newUrl.searchParams.set('searchQuery', searchQuery);
                } else {
                    newUrl.searchParams.delete('searchQuery');
                }
                window.history.pushState({}, '', newUrl.toString());
            })
            .catch(error => {
                console.error('Search error:', error);
                projectsContainer.innerHTML = '<div class="alert alert-danger">Error searching projects. Please try again.</div>';
            });
    }

    // Search on button click
    searchButton.addEventListener('click', () => performSearch(1));

    // Search on Enter key
    searchInput.addEventListener('keydown', function(e) {
        if (e.key === 'Enter') {
            e.preventDefault();
            performSearch(1);
        }
    });

    // Real-time search with debounce
    searchInput.addEventListener('input', function() {
        clearTimeout(searchTimeout);
        searchTimeout = setTimeout(() => performSearch(1), 500);
    });

    // Handle pagination clicks (delegated event handling)
    projectsContainer.addEventListener('click', function(e) {
        if (e.target.matches('.page-link[data-page]')) {
            e.preventDefault();
            const page = parseInt(e.target.getAttribute('data-page'));
            performSearch(page);
        }
    });
});
</script>
